/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n      query Me {\n        me {\n          id\n          name\n        }\n      }\n    ": types.MeDocument,
    "\n      query Search($query: String!, $page: Int) {\n        search(query: $query) {\n          profiles {\n            id\n            name\n          }\n          tmdb(page: $page) {\n            page\n            totalPages\n            totalResults\n            results {\n              __typename\n              ... on Movie {\n                id\n                tmdbId\n                title\n                posterPath\n              }\n              ... on Tv {\n                id\n                tmdbId\n                name\n                posterPath\n              }\n            }\n          }\n        }\n      }\n    ": types.SearchDocument,
    "\n      query Discover {\n        discoverMovies {\n          id\n          tmdbId\n          title\n          posterPath\n          backdropPath\n        }\n        discoverTvs {\n          id\n          tmdbId\n          name\n          posterPath\n          backdropPath\n        }\n        movieSuggestions {\n          id\n          tmdbId\n          title\n          tagline\n          posterPath\n          backdropPath\n        }\n      }\n    ": types.DiscoverDocument,
    "\n      query UserFeed {\n        userFeed {\n          ... on Recommendation {\n            id\n            media {\n              ... on Movie {\n                id\n                tmdbId\n                title\n                tagline\n                releaseDate\n                posterPath\n                genres\n              }\n              ... on Tv {\n                id\n                tmdbId\n                name\n                tagline\n                firstAirDate\n                posterPath\n                genres\n              }\n            }\n            recommendedBy {\n              id\n              name\n            }\n            message\n          }\n        }\n      }\n    ": types.UserFeedDocument,
    "\n        mutation Login($input: SignInWithJellyfinInput!) {\n          signInWithJellyfin(input: $input) {\n            accessToken\n            refreshToken\n          }\n        }\n      ": types.LoginDocument,
    "\n      query MyId {\n        me {\n          id\n        }\n      }\n    ": types.MyIdDocument,
    "\n      query Movie($tmdbId: ID!) {\n        movie(tmdbId: $tmdbId) {\n          id\n          tmdbId\n          title\n          tagline\n          posterPath\n          backdropPath\n          certification\n          genres\n          releaseDate\n          rating\n          reviews {\n            id\n            review\n            createdBy {\n              id\n              name\n            }\n          }\n          userReview {\n            id\n            rating\n            review\n          }\n          addedToWatchlist\n          watched\n        }\n      }\n    ": types.MovieDocument,
    "\n      query Users {\n        users {\n          id\n          name\n        }\n      }\n    ": types.UsersDocument,
    "\n      mutation ReviewMovie($tmdbId: ID!, $review: String!) {\n        reviewMovie(tmdbId: $tmdbId, review: $review) {\n          media {\n            ... on Movie {\n              id\n              reviews {\n                review\n                createdBy {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    ": types.ReviewMovieDocument,
    "\n        mutation RecommendMovie($tmdbId: ID!, $userId: ID!, $message: String!) {\n          createRecommendation(\n            input: {\n              tmdbId: $tmdbId\n              mediaType: MOVIE\n              recommendationForUserId: $userId\n              message: $message\n            }\n          ) {\n            id\n          }\n        }\n      ": types.RecommendMovieDocument,
    "\n          mutation AddMovieToWatchlist($tmdbId: ID!) {\n            addToWatchlist(input: { mediaType: MOVIE, tmdbId: $tmdbId }) {\n              ... on Movie {\n                id\n                addedToWatchlist\n              }\n            }\n          }\n        ": types.AddMovieToWatchlistDocument,
    "\n          mutation RemoveMovieFromWatchlist($tmdbId: ID!) {\n            removeFromWatchlist(input: { mediaType: MOVIE, tmdbId: $tmdbId }) {\n              ... on Movie {\n                id\n                addedToWatchlist\n              }\n            }\n          }\n        ": types.RemoveMovieFromWatchlistDocument,
    "\n        mutation ToggleMovieWatched($tmdbId: ID!) {\n          toggleWatched(input: { mediaType: MOVIE, tmdbId: $tmdbId }) {\n            __typename\n            ... on Movie {\n              id\n              watched\n            }\n          }\n        }\n      ": types.ToggleMovieWatchedDocument,
    "\n                mutation RateMovie($tmdbId: ID!, $rating: Float!) {\n                  rateMovie(tmdbId: $tmdbId, rating: $rating) {\n                    media {\n                      ... on Movie {\n                        id\n                        rating\n                      }\n                    }\n                  }\n                }\n              ": types.RateMovieDocument,
    "\n      query Recommendations {\n        me {\n          id\n          recommendations {\n            id\n            media {\n              __typename\n              ... on Movie {\n                id\n                tmdbId\n                title\n                tagline\n                releaseDate\n                posterPath\n                genres\n              }\n              ... on Tv {\n                id\n                tmdbId\n                name\n                tagline\n                firstAirDate\n                posterPath\n                genres\n              }\n            }\n            recommendedBy {\n              id\n              name\n            }\n            message\n          }\n        }\n      }\n    ": types.RecommendationsDocument,
    "\n      query Tv($tmdbId: ID!) {\n        tv(tmdbId: $tmdbId) {\n          id\n          tmdbId\n          name\n          tagline\n          posterPath\n          backdropPath\n          genres\n          firstAirDate\n          rating\n          reviews {\n            id\n            review\n            createdBy {\n              id\n              name\n            }\n          }\n          userReview {\n            id\n            rating\n            review\n          }\n          addedToWatchlist\n          watched\n        }\n      }\n    ": types.TvDocument,
    "\n      mutation ReviewTv($tmdbId: ID!, $review: String!) {\n        reviewTv(tmdbId: $tmdbId, review: $review) {\n          media {\n            ... on Tv {\n              id\n              reviews {\n                review\n                createdBy {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    ": types.ReviewTvDocument,
    "\n        mutation RecommendTv($tmdbId: ID!, $userId: ID!, $message: String!) {\n          createRecommendation(\n            input: {\n              tmdbId: $tmdbId\n              mediaType: TV\n              recommendationForUserId: $userId\n              message: $message\n            }\n          ) {\n            id\n          }\n        }\n      ": types.RecommendTvDocument,
    "\n          mutation AddTVToWatchlist($tmdbId: ID!) {\n            addToWatchlist(input: { mediaType: TV, tmdbId: $tmdbId }) {\n              ... on Tv {\n                id\n                addedToWatchlist\n              }\n            }\n          }\n        ": types.AddTvToWatchlistDocument,
    "\n          mutation RemoveTVFromWatchlist($tmdbId: ID!) {\n            removeFromWatchlist(input: { mediaType: TV, tmdbId: $tmdbId }) {\n              ... on Tv {\n                id\n                addedToWatchlist\n              }\n            }\n          }\n        ": types.RemoveTvFromWatchlistDocument,
    "\n        mutation ToggleTVWatched($tmdbId: ID!) {\n          toggleWatched(input: { mediaType: TV, tmdbId: $tmdbId }) {\n            __typename\n            ... on Tv {\n              id\n              watched\n            }\n          }\n        }\n      ": types.ToggleTvWatchedDocument,
    "\n                mutation RateTv($tmdbId: ID!, $rating: Float!) {\n                  rateTv(tmdbId: $tmdbId, rating: $rating) {\n                    media {\n                      ... on Tv {\n                        id\n                        rating\n                      }\n                    }\n                  }\n                }\n              ": types.RateTvDocument,
    "\n      query UserByName($name: String!) {\n        user(name: $name) {\n          id\n          jellyfinId\n          name\n          userFollows\n          followers {\n            id\n          }\n          reviews {\n            id\n            media {\n              ... on Movie {\n                id\n                tmdbId\n                title\n                posterPath\n                backdropPath\n              }\n              ... on Tv {\n                id\n                tmdbId\n                name\n                posterPath\n                backdropPath\n              }\n            }\n            createdBy {\n              id\n              jellyfinId\n              name\n            }\n            rating\n            review\n          }\n        }\n      }\n    ": types.UserByNameDocument,
    "\n      mutation ToggleFollow($userId: ID!) {\n        toggleFollow(userId: $userId) {\n          id\n          userFollows\n          followers {\n            id\n          }\n        }\n      }\n    ": types.ToggleFollowDocument,
    "\n      query Watchlist {\n        me {\n          id\n          watchlist {\n            __typename\n            ... on Movie {\n              id\n              tmdbId\n              title\n              tagline\n              releaseDate\n              posterPath\n              genres\n            }\n            ... on Tv {\n              id\n              tmdbId\n              name\n              tagline\n              firstAirDate\n              posterPath\n              genres\n            }\n          }\n        }\n      }\n    ": types.WatchlistDocument,
    "\n          mutation RefreshTokens($refreshToken: String!) {\n            refreshTokens(refreshToken: $refreshToken) {\n              accessToken\n              refreshToken\n            }\n          }\n        ": types.RefreshTokensDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query Me {\n        me {\n          id\n          name\n        }\n      }\n    "): (typeof documents)["\n      query Me {\n        me {\n          id\n          name\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query Search($query: String!, $page: Int) {\n        search(query: $query) {\n          profiles {\n            id\n            name\n          }\n          tmdb(page: $page) {\n            page\n            totalPages\n            totalResults\n            results {\n              __typename\n              ... on Movie {\n                id\n                tmdbId\n                title\n                posterPath\n              }\n              ... on Tv {\n                id\n                tmdbId\n                name\n                posterPath\n              }\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query Search($query: String!, $page: Int) {\n        search(query: $query) {\n          profiles {\n            id\n            name\n          }\n          tmdb(page: $page) {\n            page\n            totalPages\n            totalResults\n            results {\n              __typename\n              ... on Movie {\n                id\n                tmdbId\n                title\n                posterPath\n              }\n              ... on Tv {\n                id\n                tmdbId\n                name\n                posterPath\n              }\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query Discover {\n        discoverMovies {\n          id\n          tmdbId\n          title\n          posterPath\n          backdropPath\n        }\n        discoverTvs {\n          id\n          tmdbId\n          name\n          posterPath\n          backdropPath\n        }\n        movieSuggestions {\n          id\n          tmdbId\n          title\n          tagline\n          posterPath\n          backdropPath\n        }\n      }\n    "): (typeof documents)["\n      query Discover {\n        discoverMovies {\n          id\n          tmdbId\n          title\n          posterPath\n          backdropPath\n        }\n        discoverTvs {\n          id\n          tmdbId\n          name\n          posterPath\n          backdropPath\n        }\n        movieSuggestions {\n          id\n          tmdbId\n          title\n          tagline\n          posterPath\n          backdropPath\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query UserFeed {\n        userFeed {\n          ... on Recommendation {\n            id\n            media {\n              ... on Movie {\n                id\n                tmdbId\n                title\n                tagline\n                releaseDate\n                posterPath\n                genres\n              }\n              ... on Tv {\n                id\n                tmdbId\n                name\n                tagline\n                firstAirDate\n                posterPath\n                genres\n              }\n            }\n            recommendedBy {\n              id\n              name\n            }\n            message\n          }\n        }\n      }\n    "): (typeof documents)["\n      query UserFeed {\n        userFeed {\n          ... on Recommendation {\n            id\n            media {\n              ... on Movie {\n                id\n                tmdbId\n                title\n                tagline\n                releaseDate\n                posterPath\n                genres\n              }\n              ... on Tv {\n                id\n                tmdbId\n                name\n                tagline\n                firstAirDate\n                posterPath\n                genres\n              }\n            }\n            recommendedBy {\n              id\n              name\n            }\n            message\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation Login($input: SignInWithJellyfinInput!) {\n          signInWithJellyfin(input: $input) {\n            accessToken\n            refreshToken\n          }\n        }\n      "): (typeof documents)["\n        mutation Login($input: SignInWithJellyfinInput!) {\n          signInWithJellyfin(input: $input) {\n            accessToken\n            refreshToken\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query MyId {\n        me {\n          id\n        }\n      }\n    "): (typeof documents)["\n      query MyId {\n        me {\n          id\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query Movie($tmdbId: ID!) {\n        movie(tmdbId: $tmdbId) {\n          id\n          tmdbId\n          title\n          tagline\n          posterPath\n          backdropPath\n          certification\n          genres\n          releaseDate\n          rating\n          reviews {\n            id\n            review\n            createdBy {\n              id\n              name\n            }\n          }\n          userReview {\n            id\n            rating\n            review\n          }\n          addedToWatchlist\n          watched\n        }\n      }\n    "): (typeof documents)["\n      query Movie($tmdbId: ID!) {\n        movie(tmdbId: $tmdbId) {\n          id\n          tmdbId\n          title\n          tagline\n          posterPath\n          backdropPath\n          certification\n          genres\n          releaseDate\n          rating\n          reviews {\n            id\n            review\n            createdBy {\n              id\n              name\n            }\n          }\n          userReview {\n            id\n            rating\n            review\n          }\n          addedToWatchlist\n          watched\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query Users {\n        users {\n          id\n          name\n        }\n      }\n    "): (typeof documents)["\n      query Users {\n        users {\n          id\n          name\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation ReviewMovie($tmdbId: ID!, $review: String!) {\n        reviewMovie(tmdbId: $tmdbId, review: $review) {\n          media {\n            ... on Movie {\n              id\n              reviews {\n                review\n                createdBy {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation ReviewMovie($tmdbId: ID!, $review: String!) {\n        reviewMovie(tmdbId: $tmdbId, review: $review) {\n          media {\n            ... on Movie {\n              id\n              reviews {\n                review\n                createdBy {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation RecommendMovie($tmdbId: ID!, $userId: ID!, $message: String!) {\n          createRecommendation(\n            input: {\n              tmdbId: $tmdbId\n              mediaType: MOVIE\n              recommendationForUserId: $userId\n              message: $message\n            }\n          ) {\n            id\n          }\n        }\n      "): (typeof documents)["\n        mutation RecommendMovie($tmdbId: ID!, $userId: ID!, $message: String!) {\n          createRecommendation(\n            input: {\n              tmdbId: $tmdbId\n              mediaType: MOVIE\n              recommendationForUserId: $userId\n              message: $message\n            }\n          ) {\n            id\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation AddMovieToWatchlist($tmdbId: ID!) {\n            addToWatchlist(input: { mediaType: MOVIE, tmdbId: $tmdbId }) {\n              ... on Movie {\n                id\n                addedToWatchlist\n              }\n            }\n          }\n        "): (typeof documents)["\n          mutation AddMovieToWatchlist($tmdbId: ID!) {\n            addToWatchlist(input: { mediaType: MOVIE, tmdbId: $tmdbId }) {\n              ... on Movie {\n                id\n                addedToWatchlist\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation RemoveMovieFromWatchlist($tmdbId: ID!) {\n            removeFromWatchlist(input: { mediaType: MOVIE, tmdbId: $tmdbId }) {\n              ... on Movie {\n                id\n                addedToWatchlist\n              }\n            }\n          }\n        "): (typeof documents)["\n          mutation RemoveMovieFromWatchlist($tmdbId: ID!) {\n            removeFromWatchlist(input: { mediaType: MOVIE, tmdbId: $tmdbId }) {\n              ... on Movie {\n                id\n                addedToWatchlist\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation ToggleMovieWatched($tmdbId: ID!) {\n          toggleWatched(input: { mediaType: MOVIE, tmdbId: $tmdbId }) {\n            __typename\n            ... on Movie {\n              id\n              watched\n            }\n          }\n        }\n      "): (typeof documents)["\n        mutation ToggleMovieWatched($tmdbId: ID!) {\n          toggleWatched(input: { mediaType: MOVIE, tmdbId: $tmdbId }) {\n            __typename\n            ... on Movie {\n              id\n              watched\n            }\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n                mutation RateMovie($tmdbId: ID!, $rating: Float!) {\n                  rateMovie(tmdbId: $tmdbId, rating: $rating) {\n                    media {\n                      ... on Movie {\n                        id\n                        rating\n                      }\n                    }\n                  }\n                }\n              "): (typeof documents)["\n                mutation RateMovie($tmdbId: ID!, $rating: Float!) {\n                  rateMovie(tmdbId: $tmdbId, rating: $rating) {\n                    media {\n                      ... on Movie {\n                        id\n                        rating\n                      }\n                    }\n                  }\n                }\n              "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query Recommendations {\n        me {\n          id\n          recommendations {\n            id\n            media {\n              __typename\n              ... on Movie {\n                id\n                tmdbId\n                title\n                tagline\n                releaseDate\n                posterPath\n                genres\n              }\n              ... on Tv {\n                id\n                tmdbId\n                name\n                tagline\n                firstAirDate\n                posterPath\n                genres\n              }\n            }\n            recommendedBy {\n              id\n              name\n            }\n            message\n          }\n        }\n      }\n    "): (typeof documents)["\n      query Recommendations {\n        me {\n          id\n          recommendations {\n            id\n            media {\n              __typename\n              ... on Movie {\n                id\n                tmdbId\n                title\n                tagline\n                releaseDate\n                posterPath\n                genres\n              }\n              ... on Tv {\n                id\n                tmdbId\n                name\n                tagline\n                firstAirDate\n                posterPath\n                genres\n              }\n            }\n            recommendedBy {\n              id\n              name\n            }\n            message\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query Tv($tmdbId: ID!) {\n        tv(tmdbId: $tmdbId) {\n          id\n          tmdbId\n          name\n          tagline\n          posterPath\n          backdropPath\n          genres\n          firstAirDate\n          rating\n          reviews {\n            id\n            review\n            createdBy {\n              id\n              name\n            }\n          }\n          userReview {\n            id\n            rating\n            review\n          }\n          addedToWatchlist\n          watched\n        }\n      }\n    "): (typeof documents)["\n      query Tv($tmdbId: ID!) {\n        tv(tmdbId: $tmdbId) {\n          id\n          tmdbId\n          name\n          tagline\n          posterPath\n          backdropPath\n          genres\n          firstAirDate\n          rating\n          reviews {\n            id\n            review\n            createdBy {\n              id\n              name\n            }\n          }\n          userReview {\n            id\n            rating\n            review\n          }\n          addedToWatchlist\n          watched\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation ReviewTv($tmdbId: ID!, $review: String!) {\n        reviewTv(tmdbId: $tmdbId, review: $review) {\n          media {\n            ... on Tv {\n              id\n              reviews {\n                review\n                createdBy {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation ReviewTv($tmdbId: ID!, $review: String!) {\n        reviewTv(tmdbId: $tmdbId, review: $review) {\n          media {\n            ... on Tv {\n              id\n              reviews {\n                review\n                createdBy {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation RecommendTv($tmdbId: ID!, $userId: ID!, $message: String!) {\n          createRecommendation(\n            input: {\n              tmdbId: $tmdbId\n              mediaType: TV\n              recommendationForUserId: $userId\n              message: $message\n            }\n          ) {\n            id\n          }\n        }\n      "): (typeof documents)["\n        mutation RecommendTv($tmdbId: ID!, $userId: ID!, $message: String!) {\n          createRecommendation(\n            input: {\n              tmdbId: $tmdbId\n              mediaType: TV\n              recommendationForUserId: $userId\n              message: $message\n            }\n          ) {\n            id\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation AddTVToWatchlist($tmdbId: ID!) {\n            addToWatchlist(input: { mediaType: TV, tmdbId: $tmdbId }) {\n              ... on Tv {\n                id\n                addedToWatchlist\n              }\n            }\n          }\n        "): (typeof documents)["\n          mutation AddTVToWatchlist($tmdbId: ID!) {\n            addToWatchlist(input: { mediaType: TV, tmdbId: $tmdbId }) {\n              ... on Tv {\n                id\n                addedToWatchlist\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation RemoveTVFromWatchlist($tmdbId: ID!) {\n            removeFromWatchlist(input: { mediaType: TV, tmdbId: $tmdbId }) {\n              ... on Tv {\n                id\n                addedToWatchlist\n              }\n            }\n          }\n        "): (typeof documents)["\n          mutation RemoveTVFromWatchlist($tmdbId: ID!) {\n            removeFromWatchlist(input: { mediaType: TV, tmdbId: $tmdbId }) {\n              ... on Tv {\n                id\n                addedToWatchlist\n              }\n            }\n          }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation ToggleTVWatched($tmdbId: ID!) {\n          toggleWatched(input: { mediaType: TV, tmdbId: $tmdbId }) {\n            __typename\n            ... on Tv {\n              id\n              watched\n            }\n          }\n        }\n      "): (typeof documents)["\n        mutation ToggleTVWatched($tmdbId: ID!) {\n          toggleWatched(input: { mediaType: TV, tmdbId: $tmdbId }) {\n            __typename\n            ... on Tv {\n              id\n              watched\n            }\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n                mutation RateTv($tmdbId: ID!, $rating: Float!) {\n                  rateTv(tmdbId: $tmdbId, rating: $rating) {\n                    media {\n                      ... on Tv {\n                        id\n                        rating\n                      }\n                    }\n                  }\n                }\n              "): (typeof documents)["\n                mutation RateTv($tmdbId: ID!, $rating: Float!) {\n                  rateTv(tmdbId: $tmdbId, rating: $rating) {\n                    media {\n                      ... on Tv {\n                        id\n                        rating\n                      }\n                    }\n                  }\n                }\n              "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query UserByName($name: String!) {\n        user(name: $name) {\n          id\n          jellyfinId\n          name\n          userFollows\n          followers {\n            id\n          }\n          reviews {\n            id\n            media {\n              ... on Movie {\n                id\n                tmdbId\n                title\n                posterPath\n                backdropPath\n              }\n              ... on Tv {\n                id\n                tmdbId\n                name\n                posterPath\n                backdropPath\n              }\n            }\n            createdBy {\n              id\n              jellyfinId\n              name\n            }\n            rating\n            review\n          }\n        }\n      }\n    "): (typeof documents)["\n      query UserByName($name: String!) {\n        user(name: $name) {\n          id\n          jellyfinId\n          name\n          userFollows\n          followers {\n            id\n          }\n          reviews {\n            id\n            media {\n              ... on Movie {\n                id\n                tmdbId\n                title\n                posterPath\n                backdropPath\n              }\n              ... on Tv {\n                id\n                tmdbId\n                name\n                posterPath\n                backdropPath\n              }\n            }\n            createdBy {\n              id\n              jellyfinId\n              name\n            }\n            rating\n            review\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation ToggleFollow($userId: ID!) {\n        toggleFollow(userId: $userId) {\n          id\n          userFollows\n          followers {\n            id\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation ToggleFollow($userId: ID!) {\n        toggleFollow(userId: $userId) {\n          id\n          userFollows\n          followers {\n            id\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query Watchlist {\n        me {\n          id\n          watchlist {\n            __typename\n            ... on Movie {\n              id\n              tmdbId\n              title\n              tagline\n              releaseDate\n              posterPath\n              genres\n            }\n            ... on Tv {\n              id\n              tmdbId\n              name\n              tagline\n              firstAirDate\n              posterPath\n              genres\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query Watchlist {\n        me {\n          id\n          watchlist {\n            __typename\n            ... on Movie {\n              id\n              tmdbId\n              title\n              tagline\n              releaseDate\n              posterPath\n              genres\n            }\n            ... on Tv {\n              id\n              tmdbId\n              name\n              tagline\n              firstAirDate\n              posterPath\n              genres\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n          mutation RefreshTokens($refreshToken: String!) {\n            refreshTokens(refreshToken: $refreshToken) {\n              accessToken\n              refreshToken\n            }\n          }\n        "): (typeof documents)["\n          mutation RefreshTokens($refreshToken: String!) {\n            refreshTokens(refreshToken: $refreshToken) {\n              accessToken\n              refreshToken\n            }\n          }\n        "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;